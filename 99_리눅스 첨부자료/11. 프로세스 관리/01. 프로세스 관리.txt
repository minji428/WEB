### 프로세스 관리 ###


	* 프로세스 ( Process )
	
		- 커널의 관리하에 현재 시스템에서 동작중인 프로그램
		
			프로세스 -> 메모리에 저장
			실행파일 -> 하드디스크에 저장
		
		- 커널은 프로세스를 관리하기 위해서 각 프로세스에게 PCB를 할당 한다.
		
		
			+@ PCB ( Process Control Block )
				
			- 프로세스 고유 번호 ( PID )
			- 우선순위 ( Priority )
			- 현재상태 ( Current Status )
			- ...
	
	
	
	* 프로세스의 종류
	
		1) 데몬(daemon) 프로세스
		
			- 사용자에게 특정 기능이나 , 서비스를 제공하는 프로그램
		
		2) standalone	>> 컴퓨터가 켜지면 실행
		
			- 독립적으로 메모리상에 항상 상주해 있다.
			- 자원 소모가 많고 , 응답속도가 빠르다.
		
		3) xinet		>> 실행 시켜야 실행됨
		
			- xinetd데몬에 의해서 관리가 되는 형태
			- xinetd데몬은 다른 프로그램을 관리하는 프로그램이라고 하여 슈퍼데몬이라고 불리운다.
			- 사용자가 요청할 때만 실행되고 , 자원소모가 적고 , 응답속도가 느리다.
		
		
		4) init 프로세스
		
	
	
	
	* 프로세스 동작 형태
	
		- 부모 ( Parent ) 프로세스
		
			init프로세스를 제외한 모든 프로세스는 부모 프로세스를 가지고 있다.
		
		- 자식 ( Child ) 프로세스
		
			자식 프로세스는 작업을 완료하면 결과를 부모프로세스에게 전달하고 종료한다.
		
		- 고아 ( Orphan ) 프로세스
		
			자식프로세스보다 부모프로세스가 먼저 종료되면 , 
			자식프로세스가 고아프로세스가 되어 init프로세스가 관리하게 된다.
		
		- 좀비 ( Zombie ) 프로세스	>> 종료시키기 까다로움
		
			자식 프로세스의 종료 신호를 부모 프로세스가 처리하지 못할 경우 , 
			자식 프로세스는 좀비 프로세스가 된다.
	
	

	>> 환경변수 설정 직후
	
	
	* 확인 명령어
		
		1)  ps ( Process Status )
		
		- 시스템에 동작중인 프로세스 확인 
		
		
		[ 사용법 ]
		
		#ps 
		#ps [options]
		
		
		[ options ]
		
		-e : 모든 프로세스를 리스트형태로 출력
		-f : (full format) 다양한 형식(필드)으로 출력
		
		a : 다른 사용자들의 프로세스 출력
		-u : 사용자 이름 , 시간 등 상세한 정보 출력
		-x : 현재 실행되고 있는 모든 프로세스를 출력
		
		+@자주 사용되어지는 옵션
		#ps -ef
		#ps aux	>> 그냥 q 누르면 종료
		
		
		UID		: 프로세스를 실행시킨 프로세스의 소유자를 의미
		PID		: 실행된 프로세스에 커널이 부여한 ID (ex.주민번호이지만 실행때마다 달라짐)
		PPID	: 부모프로세스의 PID ( Parent Process ID )
		C		: CPU의 점유율
		STIME	: 프로세스가 시작된 시간
		TTY		: 프로세스가 연결된 터미널 pts ( 외부 )
		TIME	: 프로세스에 의해 CPU가 사용된 시간
		CMD		: 실행한 프로세스명 
		
		

		2) top
		
		- 현재 시스템의 CPU/RAM 사용률 등 다양한 정보를 실시간으로 확인할 수 있는 모니터링 툴
		
		
		! 실습
		
		@testuser1, testuser2
		#vi loop.sh
		---------------------
		#!/usr/bin/python		>> # 꼭 붙일것
		
		cnt = 1
		
		while True:				>>1부터 특정한 이벤트가 없을때까지 숫자를 5씩증가하며
			print(cnt)			>>화면에 숫자를 출력
			cnt *= 5
		
		:wq!
		-----------------------
		
		@testuser1,testuser2
		#chmod 777 loop.sh		>>실행파일변환 및 실행권한 부여
		

		@root
		#top					>> CPU, MEM 사용량 확인
		
		
		@testuser1,testuser2
		#./loop.sh				>> 무한루프파일 실행
		
		
		@root에서 CPU , MEM사용량 확인
		
		+@testuser1에서만 루프를 실행해보고 , testuser1,testuser2모두 실행해보고
		  모두 실행하지 않았을때의 상황을 확인
		
		
		3) pstree
		
		- 프로세스의 부모-자식 관계를 트리구조로 출력
		- 직관적으로 프로세스의 상태를 확인 할 수 있다.
		
		[ 사용법 ]
		
		#pstree
		
		
		! 실습
		
		#/bin/bash
		#/bin/bash
		#/bin/bash
		#sleep 9999999 & 
		#ps -ef						>> pid ppid로 부모 자식관계를 구분하기 어렵다.
		#pstree						>> 부모 자식관계를 확인하기가 용이하다.
	
	
	
	* 프로세스 동작 형태
	
		1) 포어 그라운드 ( Foreground )
		
		- 실행하는 대부분의 프로세스가 포어 그라운드로 동작
		- 실행 과정이나 결과를 화면에 출력
		
		2) 백 그라운드 ( Background )
		
		- 백그라운드로 실행시키기 위해서 & ( Ampersand )기호를 붙여 사용
		- 장시간 실행되는 프로그램에 유용
		
		
		3) 명령어
		
		#jobs  			 - 백그라운드로 동작하는 프로세스를 확인하는 명령어
		#fg %[작업번호]	 - 백그라운드로 동작하는 작업을 포어그라운드로 변경
		#bg %[작업번호]  	 - 포어그라운드 작업을 백그라운드로 변경
		 ctrl + Z
		
		
		
		! 실습
			
		#sleep 9999999			>>포그라운드 작업
		
		ctrl + c				>>작업종료
		
		#sleep 999999			>>포그라운드 작업
		
		ctrl + z				>>일시정지->백그라운드
		
		#jobs					>>백그라운드로 실행되고 있는 작업번호 확인
		#fg %[작업번호]			>>포그라운드로 실행
		
		
		! 실습
		
		#sleep 999999			>>포그라운드 작업
		
		ctrl + Z				>>일시정지 ( Stopped )
		
		#jobs					>>백그라운드로 실행되고 있는 작업번호 확인
		#bg %[작업번호]			>>백그라운드로 실행 
		#jobs					>>동작 확인 ( Stopped - Running )
		
		
		! 실습 
		
		#cd ~
		#mkdir test
		#cp -r /usr/* ./test	>>포그라운드로 진행 (시간이 오래걸린다.)
		
		ctrl + c				>>취소
		
		#cp -r /usr/* ./test &  >>백그라운드로 진행 ( 프로세스진행중에 쉘을 사용할 수 있다.)
	
	
	
	* 프로세스에게 신호 ( SIGNAL ) 전달 - kill
	
		- kill명령어를 통해서 프로세스에게 특정 신호(SIGNAL)를 전달한다.
		- kill 자체로 종료하는 것이 아니라 kill로 종료 신호를 보낸다
		
		[ 사용법 ]
		
		#kill -[신호|SIGNAL] [PID|작업번호]
		
		
		Ex)
		#kill -9 xxxx
		#kill -9 %x
		#kill -SIGKILL xxxx
		#kill -SIGKILL %x
		
		
		
		#kill -l		>> SIGNAL 확인 옵션
		
		@자주 사용되어지는 신호
		2) SIGINT 		>> 프로세스 종료 ( Ctrl + C)
		9) SIGKILL		>> 프로세스 종료 ( 강제 )		:wq!
		15) SIGTERM		>> 프로세스 종료 			:wq
		
		18) SIGCONT		>>	(정지상태)프로세스 재시작
		19) SIGSTOP		>>	프로세스 정지 ( ctrl + z )
	
		@root
		#useradd testuser1
		#passwd testuser1
		111
		111
	
		! 실습
		@testuser1
		#vi /etc/passwd				
		
		@root
		#ps -ef					>>vim /etc/passwd의 pid확인
		#kill -9 [확인된PID]		>>프로세스 강제종료 
		
		@testuser1
		강제종료 확인
	
		! 실습
		@root (vmware)
		#sleep 99999 
		
		@root (Xshell)
		#ps -ef					>>sleep 99999의 pid확인
		#kill -19 확인된 pid		>>sleep 일시정지(백그라운드)
		
		root (vmware)에서 stopped확인
		
		@root (Xshell)
		#ps -ef					>>sleep 프로세스 pid확인
		#kill -18 확인된pid		>>(정지상태)프로세스 재시작
							  
		@root (vmware)
		#jobs                   >>running확인
	
	
	
	* pkill 
	
		- 프로세스의 이름으로 실행되는 프로세스 제거
		- 옵션은 kill과 동일하다.
		
		[ 사용법 ]
		
		#pkill [옵션] [프로세스 이름] 
		
		
		! 실습
		
		#sleep 999999 &
		#sleep 999999 &
		#sleep 999999 &
		#sleep 999999 &
		#sleep 999999 &
		
		#kill -9 %5				>> 5번째 작업 프로세스 종료
		#jobs					>> 확인
		#pkill -9 sleep			>> 프로세스 이름으로 프로세스 종료
		#jobs					>> sleep의 모든 프로세스가 동시에 종료
		
		

	* 문서화 및 관리
	
		- 시스템에 설치된 하드웨어의 성능 및 상태를 문서화하거나
		  확인하는 것도 서버 컴퓨터 관리에 속한다.
		
		
		1) /proc 디렉터리	***
		
		- 시스템에 실행되고 있는 프로세스는 /proc디렉터리 아래서 확인할 수 있다.
		- 메모리에 저장된 내용을 확인한다.
		
		# ls /proc	>> 디렉터리명 = PID
		
		
		2) /proc/meminfo : 메모리 정보
		#cat /proc/meminfo
		
		
		3) /proc/cpuinfo :CPU 정보
		#cat /proc/cpuinfo
		
		
		참고) dmidecode : 시스템 하드웨어 정보를 종합적으로 확인 (기본적으로 설치되지 x )
		#yum install -y dmidecode	>>설치
		#dmidecode
	
	
	
	* 예약작업 - Cron ***
	
		- 정해진 시간에 '반복적'으로 프로세스 실행
		
		- 예약작업은 다양한 명령어를 사용하는 경우가 많다.
		   (Ex 파일복사 -> 아카이빙 & 압축 -> 특정 서버에 백업 )
		
		- crontab에는 명령어를 직접적으로 작성하는 경우는 
		  거의 없고 스크립트 파일의 경로가 작성된다. ( 스크립트 실행 )
		
		- crontab파일은 사용자 별로 생성된다.
		
		[ 사용법 ]
		
		#service crond status		>> cron데몬의 상태를 확인
		#crontab -e					>> crontab 파일 편집
		#crontab -l					>> 작업목록 확인
		#crontab -r					>> 예약작업 삭제
		#~ at						>> 한번만 실행(구글링 해볼것)
	
	
	
	* crontab 형식 ***
	
		- 총 6개의 필드로 이루어져 있으며 ,
		  각 필드의 내용을 공백 문자로 구분한다.
		
		[분]  [시]  [일]  [월] [요일]    [작업내용]
		0~59 0~23 1~31 1~12  0~6   명령어or스크립트
		
		+@
		0,7 : 일요일
		1   : 월요일
		2   : 화요일
		3   : 수요일
		4   : 목요일
		5   : 금요일
		6   : 토요일
		
		
		* : 해당항목의 모든 값을 의미 (매분,매시간,매일,등)
		, : 복수의 값을 의미 (20,30,40 => 20그리고30그리고40)
		- : 연결된 값을 의미 (20-40 => 20부터 40까지)
		/ : 특정 간격을 의미 (*/5  => 5(분,시간,일)마다)
	

	
		! 실습
		
		매월 매일 매요일 10분마다 touch /root/file을 실행
		
		#cd ~
		#crontab -e
		----------------------------
		*/10 * * * * touch /root/file
		
		:wq!
		------------------------------
		#crontab -l
		
		#date 						>> 시간확인
		#date -s "2018xxxx x:x:x"	>> 시간설정하면서 결과 확인
		#ll
		  
		#date -s "2018xxxx x:x:x"	>> 시간설정하면서 결과 확인
		#ll  						>> file 생성 시간 바뀜
		  
		  
		! 예시
		
		1) 30 23 1 * * 작업내용
		>> 매요일 매월 1일 23시 30분에 작업내용을 수행
		
		2) 1-10 13 * * * 작업내용
		>>매요일 매월 매일 13시 1~10분까지 매분마다 작업내용을 수행
		
		3) 10,20,30,40 1 * * * 작업내용
		>> 매요일 매월 매일 1시 10,20,30,40분에 작업내용을 수행
		
		4) 0-15 13 * * * 작업내용
		>>매요일 매월 매일 오후 1시 0분부터 15분까지 매분마다 작업내을 수행
		
		5) 0,20,40 * * * * 작업내용
		>>매요일 매월 매일 매시간 0분,20분,40분에 작업내용을 수행
		
		6) * * * * * 작업내용
		>>매분마다 작업내용을 수행
		
		7) 0 6 * * 1-5 작업내용
		>>매월 평일 오전 6시에 작업내용을 수행
		
		8) 0 13 * * 0,6 작업내용
		>>매월 주말 오후 1시에 작업내용을 수행
		
		9)*/10 * * * 3 작업내용
		>>매월 매주 수요일에 10분마다 작업을 수행  
	  
	  
	  
	 *  crontab 사용 제한하기
	
		- /etc/cron.allow , /etc/cron.deny파일로
		  사용자들의 crontab명령어 사용을 제어 할 수 있다. 
		
		- /etc/cron.deny파일은 기본적으로 생성되어 있다.
		
		- /etc/cron.allow파일은 관리자가 생성해야 한다.
		
		- cron.deny만 있을 경우
		  deny에 기록된 사용자만 crontab 사용 불가 , 나머지는 모두 가능
			
		- cron.deny , cron.allow가 있을경우
		  allow에 기록된 사용자만 crontab이 사용 가능 , 나머지는 모두 불가
		  
		+@deny , allow가 모두 없을 경우는 root계정만 crontab 사용가능
	  
	  
		! 실 습 
		

		@root,testuser1,testuser2,testuser3
		#crontab -e					>>모두 가능
		
		@root
		#vi /etc/cron.deny
		------------------
		testuser2
		
		:wq!
		------------------
		
		@root,testuser1,testuser2,testuser3
		#crontab -e					>>testuser2만 사용불가
		
		
		
		@root
		#vi /etc/cron.deny
		------------------
		testuser1
		testuser3
		
		:wq!
		------------------
		
		@root,testuser1,testuser2,testuser3
		#crontab -e					>>testuser1,testuser3만 사용불가
		
		확인 후, cron.deny 내용 삭제
		
		
		@root
		#vi /etc/cron.allow			>>관리자가 생성
		--------------------
		testuser2
		
		:wq!
		--------------------
		
		@root,testuser1,testuser2,testuser3
		#crontab -e					>>testuser2만 사용가능
		
		-------------------- 전부 삭제 시
		
		@root
		#rm -f /etc/cron.deny /etc/cron.allow	>>allow ,deny파일 삭제
		
		@root,testuser1,testuser2,testuser3
		#crontab -e					>>root만 사용가능**
