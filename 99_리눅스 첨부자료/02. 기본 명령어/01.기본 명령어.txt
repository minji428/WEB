
## 리눅스 기본 명령어 ##

 - 명령어의 형식(관리자(#) 사용자($))
 
 └ * command [-options] [arguments]
	 option : 명령에 특정한 기능을 사용
	 argument : 명령이 실행될 대상
	 
	 ex) # command
		 # command -options
		 # command arguments
		 # command -options arguments
		 
 └ * clear
	 터미널의 텍스트 화면을 지운다.
	 
	 [사용법]
	 # clear
	 
 └ * pwd ( Print Working Directory )
	 현재 작업중인 디렉터리 위치 정보를 절대 경로로 표시
	 
	 [사용법]
	 # pwd
	 
 └ * cd ( Change Directory )
	 디렉터리 이동
	 
	 [사용법]
	 # cd 이동위치 >> 이동위치 없이 cd만 입력하면 관리자 홈디렉터리(root(~)로 이동)
	 
 └ * ls ( List )
	 디렉터리의 목록 출력
	 특정 파일을 지정하지 않을 경우, 현재 디렉터리 목록을 출력
	 
	 [사용법]
	 # ls 경로
	 # ls
	 # ls -options
	 
	 [옵션]	>> 옵션들을 순서 상관없이 조합해서 사용 할 수도 있다(-al, -af 등)
	 -F : 파일의 형식을 알 수 있는 문자를 추가
	 -l : 리스트 형태로 출력 [이미지 파일 참고]
	 -a : 숨김 파일을 포함한 모든 내용을 출력
	 -h : 파일의 크기를 사람이 알아보기 쉽게 출력
	 -i : inode넘버를 출력
	 
	 [사용법]	: ex) # ls -F /etc >> etc폴더의 파일 목록에 형식을 포함하여 출력
	 # ~~ -F 옵션
		/ : 디렉터리
		  : 텍스트 파일
		@ : 바로가기 파일
		* : 실행 파일
	
	# 경로 이름 ( path name )
		
		- 디렉터리와 파일을 나타내는 방법
		- 절대 경로와 상대 경로 두가지 방법
		- 리눅스 운영체제에서 하위 경로를 '/'를 이용하여 표현
		
		1) 절대 경로
			└ 파일의 탐색 경로가 파일 시스템의 루트부터 시작해서 명시된 파일의 경로
			  [ 전체 디렉터리 이름을 표기하는 방법 ]
			  
		2) 상대 경로
			└ 현재 위치한 디렉터리에 대한 상대적인 경로
			  현재 위치하고 있는 디렉터리의 서브 디렉터리로 이동할 때,
			  [ 현재 시점부터 하위의 디렉터리만 표기하는 방법 ]
	
	# 디렉터리 계층 구조
	
		1) 최상위(root) 디렉터리     : '/' 모든 디렉터리의 상위 디렉터리
		2) 하위 디렉터리 & 서브 디렉터리 : 기준 디렉터리 아래 위치한 디렉터리
		3) 상위 디렉터리 & 부모 디렉터리 : '../' 루트 디렉터리를 제외한 모든 디렉터리는 부모 디렉터리가 존재함
		4) 작업 디렉터리(pwd)       : './' 현재 위치한 디렉터리(생략 가능)
		5) 홈 디렉터리
		   └각 사용자에게 할당된 작업 영역으로, 어느 사용자든 '~'은 자신의 홈 디렉터리를 나타냄
		    cd 명령어 뒤에 인자를 아무것도 주지 않을 경우, 현재 위치가 어디든 자신의 홈 디렉터리로 이동
			home(사용자 디렉터리), root(관리자 디렉터리 : ~로 표시됨)
			
	# 파일 및 디렉터리 이름 규칙
	 - 파일의 이름은 최대 255자까지 가능
	 - 점 (.)으로 시작하는 파일은 숨김파일로 간주한다.
	 - 파일과 디렉터리 이름에는 경로의 구분자로 사용하는 '/' 를 사용하지 않는다.
	 - 파일과 디렉터리 이름은 대소문자를 구별한다. 
		Ex) 		
			  윈도우				 	리눅스
	  practice == Practice	    practice != Practice
	 - 파일과 디렉터리 이름에는 알파벳 , 숫자 , 하이픈 , 언더바 , 점만을 사용한다.
	  (절대적인 규칙은 아니나 , 이를 지키지 않을경우 파일 접근이 어려워 진다.)
	 - 파일 이름에 띄어쓰기를 사용하지 않는다.
		Ex) 
			#touch file1 by root    // file1 by root3 개의 파일 생성
		
		+@참고
			#touch "file1 by root" // 띄어쓰기가 포함되서 파일이 생성
			
 └ * mkdir ( MaKe DIRectory )
	 빈 디렉터리를 생성
	 
	 [사용법]
	 # mkdir 디렉터리명 >> 디렉터리명 여러개 기재 시, 현재 위치에 여러개 생성
	 
	 [옵션]
	 -p : 하위 디렉터리까지 한번에 생성
	 ex)(/1이 없을 때) #mkdir /1/2/3/4/5 >> 생성 불가
					#mkdir -p /1/2/3/4/5 >> 폴더'1' 안에 폴더'2' 안에 폴더'3'... 폴더'5' 생성
					
	 ++ 중괄호 확장 ( brace expansion )
		ex) # mkdir a{b,c,d,e}f >> abf, acf, adf, aef 생성
			# mkdir test{1..5}  >> test1, test2, test3, test4, test5 생성
			
 └ * touch
	 빈 파일을 생성
	 
	 [사용법]
	 # touch /root/test_file
	 
 └ * rmdir ( ReMove DIRectory )
	 빈 디렉터리를 삭제
	 
	 [사용법]
	 # rmdir 빈디렉터리명
	 
 └ * rm ( ReMove )
	 파일과 디렉터리 삭제
	 -r 옵션을 지정하지 않으면 디렉터리를 삭제하지 못함
	 -f 옵션을 지정하지 않으면 지정된 대상 제거시마다 확인 메세지를 출력
	 
	 [사용법]
	 # rm 파일멸
	 # rm -r 디렉터리명
	 # rm -rf 디렉터리명
	 
	 [옵션]
	 -r : 디렉터리 삭제시, 하위 디렉터리와 파일을 포함하여 삭제
	 -f : 삭제시, 확인 메세지를 보여주지않고 바로 삭제
	 
	 
 └ * mv ( MoVe )
	 파일이나 디렉터리를 이동하거나 이름을 변경할 경우 사용
	 두 인자가 모두 파일인 경우 즉, 이름을 변경을 변경한다..
	
	 [사용법]
	
	 # mv 원본파일,디렉터리 이동위치
	
	 Ex)
	 # mv /root/test1 /dir1		   	>> /root/test1파일을 /dir1로 이동
	 # mv /dir1/test1 /dir1/test9  	>> /dir1/test1파일의 이름을 test9로 변경
	
	
 └ * cp ( CoPy )
	 파일을 지정된 경로에 복사한다.
	

	 [사용법]
	
	 # cp 원본 이동위치
	
	
	 Ex)
	 # cp /etc/passwd /root			>> /etc/passwd파일을 /root에 복사 
										(이동위치의 마지막이 디렉터리인경우 이름그대로 복사)
										
	 # cp /etc/passwd /root/modi	>> /etc/passwd파일을 /root에 modi라는 이름으로 변경하여 복사
									   (이동위치의 마지막이 파일인경우 파일명으로 변경하여 복사)
	
	 [옵션]

	 -r : 디렉터리를 복사할 경우 반드시 붙이는 옵션
	    
	 Ex)									
	 # cp /bin /practice/cp_test		>> 불가능
	 # cp -r /bin /practice/cp_test		>> 가능
		
		
		
 └ * alias ( 그냥 종료 시에는 사라지므로, 리눅스에 꼭 등록을 해주어야 계속 사용 가능)
	 복잡한 명령어와 긴 옵션을 짧은 문자열로 바꿔준다.
	 옵션을 포함한 긴 명령어를 자주 사용해야 한다면, alias를 이용하는 것이 효과적이다.
	  
	 [사용법]
	
	 1) 설정
	
	 # alias 별명="명령어"
	
	 2) 확인
	 # alias
	
	 3) 해지
	 # unalias 별명
	
	
	 ! 실습1
	
	 # alias					>> alias목록 확인
	 # network					>> 에러메세지
	
	 # alias network="vi /etc/sysconfig/network-scripts/ifcfg-eth0" >> network로 alias 등록
	 # alias						>> alias목록에 network 추가됐는지 확인
	
	 # network					>> 명령어 동작
	
		
	 # unlias network			>> alias 삭제
	 # network					>> 에러메세지 (alias에서 삭제했기때문)
	
	 ! 실습2
	 
	 # cd /
	 # ls							>> 칼라
	 # alias						>> ls확인
	 # unalias ls					>> ls를 alias에서 삭제
	 # ls							>> 칼라 x
	
	 # alias ls="ls --color=auto"	>> 알리아스 등록
	 # alias						>> ls 확인
	 # ls							>> 다시 칼라
	
	
 └ * cat
	 텍스트 파일 내용을 출력한다.
	
	 [사용법]
	
	 # cat 파일이름
	
	
	 [옵션]
	
	 -b : '공백라인을 제외한' 글자가 있는 모든 라인에 번호를 붙여 출력
	 -n : '공백라인을 포함한' 글자가 있는 모든 라인에 번호를 붙여 출력
	
	
	 Ex) 
	 # cat /etc/services
	 # cat -b /etc/services
	 # cat -n /etc/services
	
	
	
 └ * head
	 '파일'의 첫 10줄을 출력한다.
	 대용량 파일의 앞부분의 내용을 볼때 유용하다.
	 출력행수를 -n 옵션을 이용해서 지정해 줄 수 있다.
	
	 [사용법]
	
	 # head 파일이름
	 # head -n 라인수 파일이름      
	
	
	 Ex) 
	 # head /etc/services			>> 10줄 출력
	 # head -n 5 /etc/services		>> 5줄 출력
	 # head -n 20 /etc/services		>> 20줄 출력
	
	
	
 └ * tail
	 파일의 마지막 행을 기준으로 10번째 행까지 출력한다.
	 로그파일과 같이 '마지막 행을 확인하고 싶을 때' 유용하다.
	 출력행수를 -n 옵션을 이용해서 지정이 가능하다.
	
	 [ 사용법 ]
	
	 # tail 파일이름
	 # tail -n 라인수 파일이름       
	
	 [ 옵션 ]
	
	 -f : 실시간으로 확인한다.
	
	 Ex)
	 # tail /etc/services
	 # tail -n 20 /etc/services
	 # tail -f /var/log/secure		>> 실시간 접속 관련 로그 확인
	

	
	
 └ * more
	 파일을 화면 단위로 출력한다.
	 한 페이지 이상되는 출력 내용을 한 화면의 페이지 단위로 보여주며 검색기능과 원하는 페이지로 이동 기능을 제공한다.
	
	 [ 사용법 ]

	 # more 파일이름
	
	 Ex) # more /etc/services
	
 	 space bar : 다음 화면 출력
	 enter     : 한줄씩 스크롤
	 b		   : 이전화면
	 f		   : 다음화면
	
	 /숫자	  : 해당 숫자의 페이지로 이동
	 /문자열	  : 문자열 검색
	 q		  : 종료
	
	

	
 └ * file
	 파일 형식 확인
	
	 [ 사용법 ]
	
	 # file 파일
	
	 ex) 
	 # file /bin/ls			>> ELF 64-bit LSB executable, 
							   x86-64, 
							   version 1 (SYSV), 
							   dynamically linked (uses shared libs), 
							   for GNU/Linux 2.6.18, stripped


	 # file /etc/passwd		>> ASCII text
	 # file /root			>> directory
	
	
	
	
 └ * which
	 명령어 (실행파일) 경로 및  alias 확인

	 [ 사용법 ]
	
	 # which 파일
	
	 Ex)
	 # which ls		>> alias ls='ls --color=auto'	: ls에 걸린 alias와
							   /bin/ls				: 경로 출력
	 # which cp
	
	
	
	
	
 └ * watch
	 주기적으로 지정된 명령을 실행하고 결과를 출력
	
	 [ 사용법 ]
	
	 # watch [option] "command"
	
	 [ 옵션 ]
	
	 -n : n초 주기로 명령 결과 출력
	 -d : 변경된 부분에 음영 처리
	
	
	 Ex)
	 # watch -n 0.1 "netstat"   
	 # watch -d -n 0.1 "netstat"	

	 vmware에서 # yum install -y lrzsz 명령어를 실행하여
	 Xshell에서 화면의 변화를 확인

	
	   
 └ * history 
	 이전에 사용했던 명령어 목록을 보여준다.
	
	 [ 사용법 ]
	
	 # history
	
	 +@ 
	 !번호		>> 번호에 해당하는 명령어가 수행
	 
	 Ex)	
	 !5			>> 5번에 해당하는 명령어 수행
	
	
	
	
 └ * echo
	 특정 문자열을 화면에 출력함
	
	 [ 사용법 ]
	
	 # echo "문자열"
	
	 Ex)
	 # echo "Linux1"			>> Linux1 문자열을 화면에 출력
	 # echo "Linux2"        	>> Linux2 문자열을 화면에 출력
	 # echo "Linux3" > file.txt	>> Linux3 이라는 문자열이 저장된 file.txt 파일 생성
	
	
 └ * wc ( Word Count )
	 문서의 행 , 단어 , 문자의 개수를 카운트 하고 출력
	
	 [ 사용법 ]

	 # wc 파일이름
	
	 [ 옵션 ]

	 -l : 라인 수 출력
	 -w : 단어 수 출력
	 -m : 문자 수 출력

	
	 Ex) 
	 # wc /etc/services
	 # wc -l /etc/services
	 # wc -w /etc/services
	 # wc -m /etc/services

	
	
	
	 +@ 파일 전송 패키지 설치
	 # yum install -y lrzsz		>> 인터넷이 연결되어있어야 한다.
	
	 1) Host OS -> Guest OS
		
		Host OS의 파일을 선택한 후에  Xshell화면으로 Drag & Drop
		
	 2) Guest OS -> Host OS
	
		# sz 파일명	-> 위치선택
	
	
	
 └ * grep ( Globally find Regular-Expression and Print )
	 파일의 내용 중, 정규식 패턴에 일치하는 문자열을 찾아 화면에 출력
	
	 [ 사용법 ]
	
	 # grep "패턴" 파일
	
	 Ex)# grep "root" /etc/passwd		>> /etc/passwd에 있는 "root" 문자열 출력
	
	 [ 옵션 ]
	
	 -i (ignore-case)   : 대소문자를 구별하지 않고, 모두 검색
	 -n (--line-number) : 행 번호를 함께 보여준다.
	 -v (--revert-math) : 정규식에 일치하지 않는 행만 보여준다. (해당 문자열을 포함하지 않는 행)
	 -r (--recursive)   : 하위 디렉터리에 위치한 파일도 검색
	
	 Ex)
	 # grep -i "root" /etc/passwd
	 # grep -n "root" /etc/passwd
	 # grep -v "root" /etc/passwd
	 # grep -r "root" /etc
	 
	 >> grep_test.txt 파일을 XShell로 드래그하면 root홈 폴더에 저장됨
	 
	 # grep "#" /root/grep_test.txt
	 # grep -v "#" /root/grep_test.txt
	
	 +@
	 # alias grep="grep --color=auto"		>> 패턴식 컬러출력 

	
	
 └ * cut
	 파일에서 원하는 필드를 뽑아낸다.
	
	 [ 사용법 ]
	
	 # cut [옵션] 파일이름
	
	 [ 옵션 ]
	
	 -c : 잘라낼 글자 위치를 지정
	 -f : 잘라낼 필드를 지정
	 -d : 필드와 필드를 구분하는 문자를 지정 ( 기본은 tab )
	
	 Ex)
	 aaa:bbb:ccc:ddd:eee:fff
	 123:456:678:111:222:333

	 
	 # cut -c 1 cut_test.txt			>> 각 행의 1번째 글자 (a, 1)
	 # cut -c 1,3,5 cut_test.txt		>> 각 행의 1, 3, 5번째 글자
	 # cut -c 1-4 cut_test.txt			>> 각 행의 1~4번 글자
	 # cut -c 1-4,5-7 cut_test.txt		>> 각 행의 1~4번, 5~7번 글자
	
	
	 # cut -d ":" -f 1 cut_test.txt		>> :를 필드 구분자로 지정하여 1번째 필드만 (aaa, 123)
	 # cut -d ":" -f 1,3 cut_test.txt	>> :를 필드 구분자로 지정하여 1,3번째 필드만
	 # cut -d ":" -f 1-3 cut_test.txt	>> :를 필드 구분자로 지정하여 1~3번째 필드만
	
	
	
	
 └ * sort
	 파일 내의 내용을 알파벳 순서대로 정렬
	
	 [ 사용법 ]
	
	 # sort [옵션] [파일]
	
	 [ 옵션 ]
	
	 -n	: 숫자를 기준으로 정렬
	 -r : 역순으로 정렬
	 -u : 중복행 제거 ( uniq )
	 -o : 출력 결과를 파일로 저장
	
	 # cat sort_test2.txt			>> 원본 출력
	 # sort sort_test2.txt			>> 영어를 기준으로 정렬하여 출력
	 # sort -u sort_test2.txt		>> 영어를 기준으로 정렬하여 출력 (중복제거)
	 # sort -n sort_test1.txt		>> 숫자를 기준으로 정렬하여 출력
	 # sort -nr sort_test1.txt		>> 숫자를 기준으로 정렬하여 출력 ( 역순 )
	 # sort -n sort_test1.txt -o sorted_test.txt
	 └ 숫자를 기준으로 정렬한 결과를 sorted_test.txt 파일로 저장
	
	
	
 └ * time ( 나중에 )
	 명령어가 실행되고 완료되기까지 시간을 측정해주는 명령어
	  
	 [ 사용법 ]
	
	 # time [명령어]
	
	
	
	
 └ * shutdown -h now | init 0 | poweroff | halt
	 시스템을 '종료'하는 명령어
	
	 [ 사용법 ]
	
	 # shutdown -h now
	 # init 0				>> 제일 안정적
	 # poweroff
	 # halt
	
	
	
	
 └ * shutdown -r now | init 6 | reboot
	 시스템을 '재시작'하는 명령어
	
	 [ 사용법 ]
	
	 # shutdown -r now
	 # init 6				>> 제일 안정적
	 # reboot
	
	
	
	
 └ * date
	 시스템 시간을 확인하거나 수정하는 명령어
	
	 [ 사용법 ]
	
	 # date								>> 현재 시스템 시간 확인
	 # date -s "2018-03-14 19:23"		>> 날짜와 시간 변경
	 # date -s "12:30"					>> 시간 변경
	 # date -s "20180314"				>> 날짜 변경(시간 초기화)
	
	
		
		
 └ * man ( MANual ) *중요*
	 알고 싶은 명령어의 메뉴얼을 출력한다.
	 man은 명령어의 자세한 사용법이나 의미를 알 수 없을 경우 사용한다
	 최소 버젼에는 설치가 되어있지 않기 때문에 #yum install - y man으로 명령어를 설치한 후에 사용한다.
	
	 # yum install -y man   	>> XShell에 설치작업
		
	 [ 사용법 ]	
	
	 # man 명령어
	
	 Ex) 	
	 # man grep
	 # men cut
	
	 +@ man 명령어에서 
	 /문자열 : 해당 문자열을 표시하고 찾아줌
	
	
	 +@ 명령어의 도움말
	 # CMD -h
	 # CMD -help
	 # CMD --help
	
	 
	  
	
	
	
	
	
	
	
	
	
	