### VI Editor ###


	- Visual Editor의 약자로 UNIX계열 시스템에 사용되는 대표적인 편집기
	  
 
	* 사용방법
	
		1)#vi 기존 파일이름			>> 기존파일을 연다.
		2)#vi 새로운 파일이름			>> 새로운 빈 파일을 연다.[New File]
		3)#vi					>> 새로운 빈파일을 만들고 저장할때 파일명을 입력한다.
	
	
		1. 명령모드
		
			* 방향키
			
				w  : 한단어 오른쪽으로 이동
				b  : 한단어 왼쪽으로 이동
				^  : 커서라인에서 첫글자로 이동
				$  : 커서라인에서 마지막글자로 이동
				G  : 문서의 마지막으로 이동
				gg : 문서의 처음으로 이동
			
			
				:라인 넘버   		>> 해당 라인으로 이동
				Ex) :15			>> 15번 라인으로 이동
					:1520		>> 1520번 라인으로 이동
				
				ctrl + b  : 이전화면
				ctrl + f  : 다음화면
		
		
		
			* 복사 & 붙여넣기
			
				yy(yank)  : 커서에 있는 라인을 복사
				숫자yy    : 커서라인부터 숫자라인만큼 복사
				
					Ex) 3yy  >> 커서를기준으로 3줄복사
						10yy >> 커서를기준으로 10줄복사
				
				p(put)    : 커서라인 아래에 붙여넣기(소문자)
				P         : 커서라인 위에 붙여넣기 (대문자)	
				u        :  해당 명령어 취소하기
				ctrl + r :  취소한 명령을 다시 실행
		
		
		
			* 삭제
			
				x      : 커서에 위치한 한 글자 삭제
				dw     : 커서에 위치한 한 단어 삭제
				dd     : 커서의 라인 1줄 삭제
				숫자dd : 커서를 기준으로 숫자라인만큼 삭제
					Ex) 10dd	>> 커서기준으로 10줄 삭제
						3dd		>> 커서기준으로 3줄 삭제
				
				dG    : 커서를 기준으로 하위의 모든 라인 삭제
				
				:숫자1,숫자2 d  		>> 숫자1번부터 숫자 2번행까지 삭제
					Ex) :1,10 d    >> 1번부터 10번행까지 삭제
			
		
		
		
			* 검색 & 치환
			
				/문자열 	: 특정 문자열 검색
					Ex) /is        >>is검색
							  
					n - 다음 문자열로 이동
					N - 이전 문자열로 이동
							
				
				:%s/[이전글자]/[새로운글자]		>>문서전체에서 [이전글자]를[새글자]로 변경
					
					Ex) :%s/pass/Pass		>> pass -> Pass로 변경
						:%s/Pass/pass		>> Pass -> pass로 변경	
						
						:%s/pass/Pass/g		>> 검색된 문자열 전체 치환
		

		
		2. 편집 모드
		
			- 편집에 사용되는 모드
			- 명령모드에서 i,a,o,I,A,O누를 경우 진입하는 모드
			- esc를 눌러서 편집모드를 탈출
			
			i : 현재 커서 위치부터 편집을 시작
			a : 현재 커서 다음 위치부터 편집을 시작
			o : 현재 커서 아래 위치부터 편집을 시작
			I : 현재 라인의 가장 앞에서부터 편집을 시작
			A : 현재 라인의 가장 끝에서부터 편집을 시작
			O : 현재 커서 위 위치부터 편집을 시작
		
		
		3. 실행 모드
		
			:w				>> 저장
			:q				>> 저장하지 않고 종료
			:q!				>> 저장하지 않고 강제종료
			
			:wq				>> 저장후 종료
			:wq!			>> 저장후 강제종료
			
			:set number		>> 라인을 보여준다.
			:set nu			>> 약자
			
			:set nonumber	>> 라인을 보여주지 않는다.
			:set nonu		>> 약자
	
	
	
	
	* vim 편집기 및 관련 환경 설정
	
		#yum -y install vim		>> vim패키지 설치
		
		#vi /etc/fstab			>> vi로 확인
		#vim /etc/fstab			>> vim으로 확인 ( vi와 차이점 확인 = 컬러풀)
		
		#alias vi="vim"			>> alias에 등록
								  vi명령어를 입력하면 vim이 실행
		
		#vi /etc/vimrc
		----------------------
		(제일 하단에) 
		set number					>> 추가
		
		:wq
		----------------------
		
		#vi /etc/fstab		>> 행번호가 자동으로 추가되는지 확인
	
	
	
	* swap파일
	
		- vi에디터가 갑작스럽게 종료되었을 경우를 대비하여
		 임시 파일 (swap파일)에 변경사항을 기록하고 있다.
		 
		- swap파일을 이용하여 기록하고 있는 파일을 내용을
		 복구 할 수 있으며 swap파일이 생성되는 경로는
		 원본파일이 위치한 디렉터리이다.
		
		- swap파일이 존재하면 복구메세지가 지속적으로
		  출력되기 때문에 복구가 끝났다면 , 해당 파일을
		  삭제하여 복구 메세지가 더이상 출력되지 않도록
		  해야한다.
	  
	
		! 실습
		
		@X-Shell
		#cd 
		#pwd				/root
		
		#vi ./viEx			
		----------------------
		메세지~~~~
		
		
		----------------------
		
		-> Xshell접속을 강제로 종료
		-> 재 접속

		
		#vi ./viEx
		-----------------------
		복구 메세지

		:recover				>> 복구 진행
		
		
		추가적으로 메세지적어보기 ~~~~
		
		:wq!					>> 정상적으로 종료
		------------------------

		
		#vi ./viEx				>> 재접속
		------------------------
		
		(정상적으로 종료했음에도 불구하고 지속적으로 복구 메세지 출력 )
		
		enter...
		:q!						>> 종료
		-----------------------
		
		
		#ls -al					>> 숨김파일 목록까지 확인
		#rm -f .viEx.swp		>> swap파일 제거(오류 기록)
		
		#vi ./viEx				>> 더이상 복구메세지 출력x
	
	

	
	! [실습] ssh서비스 배너 변경 
	
	
		#vi /etc/ssh/sshd_config			>>ssh 주 설정 파일
		----------------------------
		
		:129 (129번행) 
		#Banner none => Banner /etc/issue.net    >> 다음과 같이 편집(#도 삭제)
		
		:wq!							   >> 저장후 종료
		----------------------------
		
		
		>> /etc/issue.net은 원격접속시에 패스워드를 입력하기전에
		  화면에 출력할 메세지를 저장하고 있는 설정 파일
		  
		  즉 "/etc/issue.net에 기록되어 있는대로 메세지를
			  보여주겠다"는 의미의 설정
		
		
		#vi /etc/issue.net
		----------------------------
		내가 원하는 메세지			 	>> 원격접속시 보여주고 싶은 메세지
		
		
		:wq!						>> 저장 후 종료
		-----------------------------
		
		#service sshd restart		>> ssh 서비스 재시작
		
		재 접속시에 내가 입력한 메세지가 출력되는지 확인
	
	
	
	

	
	
	
	